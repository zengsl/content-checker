/*
    buildscript代码块中的声明是gradle脚本自身需要的资源。
    可以声明的资源包括依赖项、第三方插件、maven仓库地址等。
    gradle在执行脚本时，会优先执行buildscript代码块中的内容，然后才会执行剩余的build脚本。
    该部分代码应该置顶
*/
buildscript {
    /*ext {
        springBootVersion = '3.1.4' // https://spring.io/projects/spring-boot#learn
    }
    repositories {
        mavenLocal()
        maven { name "Alibaba central"; url "https://maven.aliyun.com/repository/central" }
        maven { name "Alibaba"; url "https://maven.aliyun.com/repository/public" }
        maven { name "Alibaba google"; url "https://maven.aliyun.com/repository/google" }
        maven { name "Alibaba gradle-plugin"; url "https://maven.aliyun.com/repository/gradle-plugin" }
        maven { name "Alibaba spring"; url "https://maven.aliyun.com/repository/spring" }
        maven { name "Alibaba spring-plugin"; url "https://maven.aliyun.com/repository/spring-plugin" }
        maven { name "Alibaba grails-core"; url "https://maven.aliyun.com/repository/grails-core" }
        maven { name "Alibaba apache-snapshots"; url "https://maven.aliyun.com/repository/apache-snapshots" }
        maven {
            url "https://mirrors.huaweicloud.com/repository/maven/"
            name = "华为开源镜像库"
        }
        maven { url "https://repo.spring.io/libs-release" }
        mavenCentral()
    }
    dependencies {
        classpath("io.spring.gradle:dependency-management-plugin:1.1.3")
    }*/
}


//插件
plugins {
    id 'org.springframework.boot' version '3.1.4'
    id("io.spring.dependency-management") version "1.1.3"
    id 'java'
}

apply from: 'version.gradle'

subprojects {


    apply plugin:'java-library'
//    apply plugin:'idea'
    apply plugin: 'io.spring.dependency-management'
    apply plugin: 'org.springframework.boot'


    dependencies {
        implementation platform(libs.hutool.bom)
        implementation libs.guava
        /*implementation platform('org.springframework.boot:spring-boot-dependencies:3.1.4')*/
        /*implementation 'org.springframework.boot:spring-boot-starter'*/

        compileOnly 'org.projectlombok:lombok'
        testCompileOnly 'org.projectlombok:lombok'
        annotationProcessor 'org.projectlombok:lombok'

        developmentOnly 'org.springframework.boot:spring-boot-devtools'
        /*lombok要在spring-boot-configuration-processor之前执行*/
        annotationProcessor 'org.springframework.boot:spring-boot-configuration-processor'
        /*tasks.named('compileJava') {
            inputs.files(tasks.named('processResources'))
        }*/
        testImplementation 'org.springframework.boot:spring-boot-starter-test'
        testImplementation platform('org.junit:junit-bom:5.9.1')
        testImplementation 'org.junit.jupiter:junit-jupiter'
    }
    test {
        useJUnitPlatform()
    }
}


/*
include 'content-checker-service'
include 'content-checker-api'
include 'content-checker-web'
include 'content-checker-test'
include 'content-checker-util'
include 'content-checker-pojo'
include 'content-checker-mapper'
*
*/

/*project('content-checker-pojo') {
 dependencies {

 }
}*/

allprojects {
    group = 'com.eva.check'
    version = '1.0-SNAPSHOT'
    sourceCompatibility= JavaVersion.VERSION_17
    targetCompatibility= JavaVersion.VERSION_17
    apply plugin:'java'
    repositories {
        mavenLocal()
        mavenCentral()
    }


}


